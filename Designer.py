#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Sat Jan 10 13:39:22 2015
#

import wx
import os
import xml.etree.ElementTree as ET
from copy import deepcopy
import math

import SmoresLibraryEntry as SLE
from utils.utils import string2Tuple, prettify
from utils import kinematics
from utils.previewCanvas import PreviewCanvas
from objects import Module, Component, Connection, Link

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class Designer_Frame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Designer_Frame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_base = wx.StaticText(self, wx.ID_ANY, _("Choose Base Component:"))
        self.combo_box_base = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.label_name = wx.StaticText(self, wx.ID_ANY, _("Component Name: "))
        self.text_ctrl_name = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_parent = wx.StaticText(self, wx.ID_ANY, _("Parent Component"))
        self.combo_box_config1 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.combo_box_module1 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.combo_box_node1 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.p_canvas = PreviewCanvas(self, wx.ID_ANY)
        self.label_child = wx.StaticText(self, wx.ID_ANY, _("Child Component"))
        self.combo_box_config2 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.combo_box_module2 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.combo_box_node2 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.c_canvas = PreviewCanvas(self, wx.ID_ANY)
        self.list_ctrl_configs = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.LC_VRULES | wx.SUNKEN_BORDER)
        self.label_distance = wx.StaticText(self, wx.ID_ANY, _("Distance: "))
        self.text_ctrl_distance = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_angle = wx.StaticText(self, wx.ID_ANY, _("Angle: "))
        self.slider_angle = wx.Slider(self, wx.ID_ANY, 0, 0, 360, style=wx.SL_HORIZONTAL | wx.SL_AUTOTICKS | wx.SL_LABELS)
        self.button_insert = wx.Button(self, wx.ID_ANY, _("Insert"))
        self.button_remove = wx.Button(self, wx.ID_ANY, _("Remove"))
        self.button_save = wx.Button(self, wx.ID_ANY, _("Save"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.onSelectBase, self.combo_box_base)
        self.Bind(wx.EVT_COMBOBOX, self.onSelectConfig1, self.combo_box_config1)
        self.Bind(wx.EVT_COMBOBOX, self.onSelectModule1, self.combo_box_module1)
        self.Bind(wx.EVT_COMBOBOX, self.onSelectConfig2, self.combo_box_config2)
        self.Bind(wx.EVT_COMBOBOX, self.onSelectModule2, self.combo_box_module2)
        self.Bind(wx.EVT_BUTTON, self.onClickInsert, self.button_insert)
        self.Bind(wx.EVT_BUTTON, self.onClickRemove, self.button_remove)
        self.Bind(wx.EVT_BUTTON, self.onClickSave, self.button_save)
        # end wxGlade

        self.smores_library = []
        self.smores_library_to_components = []
        self.inserted_components = {} # {name: component_obj}
        self.component_dict = {} # {name: ET_tree}
        self.node_name = ["Front Wheel", "Left Wheel", "Right Wheel", "Back Frame"]
        self.link_list = []

        self.library_path = '/home/asl/SMORES/gaits_and_configs/'
        self.loadSMORESLibrary(self.library_path)
        self.populateBaseList()
        self.populateConfigList()
        self.text_ctrl_name.SetValue(self.nextAvailableName())

    def __set_properties(self):
        # begin wxGlade: Designer_Frame.__set_properties
        self.SetTitle(_("frame_1"))
        self.SetSize((1177, 611))
        self.text_ctrl_name.SetMinSize((200, 27))
        self.p_canvas.SetMinSize((600, 120))
        self.c_canvas.SetMinSize((600, 120))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Designer_Frame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_9.Add(self.label_base, 0, 0, 0)
        sizer_9.Add(self.combo_box_base, 0, 0, 0)
        sizer_12.Add(sizer_9, 1, wx.EXPAND, 0)
        sizer_13.Add(self.label_name, 0, 0, 0)
        sizer_13.Add(self.text_ctrl_name, 0, 0, 0)
        sizer_12.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_2.Add(self.label_parent, 0, 0, 0)
        sizer_3.Add(self.combo_box_config1, 0, 0, 0)
        sizer_3.Add(self.combo_box_module1, 0, 0, 0)
        sizer_3.Add(self.combo_box_node1, 0, 0, 0)
        sizer_3.Add(self.p_canvas, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_2.Add(self.label_child, 0, 0, 0)
        sizer_4.Add(self.combo_box_config2, 0, 0, 0)
        sizer_4.Add(self.combo_box_module2, 0, 0, 0)
        sizer_4.Add(self.combo_box_node2, 0, 0, 0)
        sizer_4.Add(self.c_canvas, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_2.Add(self.list_ctrl_configs, 1, wx.EXPAND, 0)
        sizer_10.Add(self.label_distance, 0, 0, 0)
        sizer_10.Add(self.text_ctrl_distance, 0, 0, 0)
        sizer_6.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_11.Add(self.label_angle, 0, 0, 0)
        sizer_11.Add(self.slider_angle, 0, wx.EXPAND, 0)
        sizer_6.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_7.Add(self.button_insert, 0, 0, 0)
        sizer_7.Add(self.button_remove, 0, 0, 0)
        sizer_5.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_8.Add(self.button_save, 0, 0, 0)
        sizer_5.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

        self.setupListCtrlConfigs()
        self.setComboBoxState(False)
        self.text_ctrl_distance.SetValue("0")
        self.button_remove.Disable()

    def setupListCtrlConfigs(self):
        self.list_ctrl_configs.InsertColumn(0, "Angle")
        self.list_ctrl_configs.SetColumnWidth(0, 80)
        self.list_ctrl_configs.InsertColumn(0, "Distance")
        self.list_ctrl_configs.SetColumnWidth(0, 80)
        self.list_ctrl_configs.InsertColumn(0, "")
        self.list_ctrl_configs.SetColumnWidth(0, 100)
        self.list_ctrl_configs.InsertColumn(0, "")
        self.list_ctrl_configs.SetColumnWidth(0, 100)
        self.list_ctrl_configs.InsertColumn(0, "Child")
        self.list_ctrl_configs.SetColumnWidth(0, 150)
        self.list_ctrl_configs.InsertColumn(0, "")
        self.list_ctrl_configs.SetColumnWidth(0, 100)
        self.list_ctrl_configs.InsertColumn(0, "")
        self.list_ctrl_configs.SetColumnWidth(0, 100)
        self.list_ctrl_configs.InsertColumn(0, "Parent")
        self.list_ctrl_configs.SetColumnWidth(0, 150)

    def setComboBoxState(self, enable = True):
        if enable:
            self.combo_box_config1.Enable()
            self.combo_box_config2.Enable()
            self.combo_box_module1.Enable()
            self.combo_box_module2.Enable()
            self.combo_box_node1.Enable()
            self.combo_box_node2.Enable()
        else:
            self.combo_box_config1.Disable()
            self.combo_box_config2.Disable()
            self.combo_box_module1.Disable()
            self.combo_box_module2.Disable()
            self.combo_box_node1.Disable()
            self.combo_box_node2.Disable()

    def nextAvailableName(self):
        name = ""
        i = 0
        while len(name) == 0:
            name = "Component_{}".format(i)
            for component_name in self.inserted_components:
                if component_name.lower() == name.lower():
                    name = ""
                    i += 1
                    break
        return name

    def populateBaseList(self):
        for component_obj in self.smores_library_to_components:
            self.combo_box_base.Append(component_obj.name, component_obj)

    def populateConfigList(self):
        for component_obj in self.smores_library_to_components:
            self.combo_box_config2.Append(component_obj.name, component_obj)

    def loadSMORESLibrary(self, smores_library_path):
        """
        Load the SMORES library
        """
        # walk down the library to load all data
        for root, dirs, files in os.walk(smores_library_path):
            # ignore the top most directory
            if root == smores_library_path: continue

            # otherwise load the config and gait data
            # each configuration is stored in a folder which includes
            # one .config file and multipule .gait files
            for file_name in files:
                if os.path.splitext(file_name)[1] == '.conf':
                    # this directory has a .config file
                    # this is a valid configuration entry
                    sle_object = SLE.SmoresLibraryEntry()
                    sle_object.entry_dir_path = root

                    # store the configuration file name
                    sle_object.name = os.path.splitext(file_name)[0]

                    # store the configuration file name
                    sle_object.configuration_file_name = os.path.join(root, file_name)

                    # store the gait files if there is any
                    sle_object.gait_file_name_list = [f for f in files \
                            if os.path.splitext(f)[1] == '.gait']

                    sle_object.ET_tree = ET.parse(sle_object.configuration_file_name)

                    # store the SMORES library entry
                    self.smores_library.append(sle_object)

                    component_obj = Component.Component()
                    component_obj.name = sle_object.name
                    component_obj.sle_object = sle_object
                    component_obj.module_list = self.getModuleList(sle_object.ET_tree)
                    component_obj.connection_list = self.getConnectionList(sle_object.ET_tree)
                    component_obj.module_list = self.updateModuleNodeInfo(component_obj.connection_list, component_obj.module_list)
                    self.smores_library_to_components.append(component_obj)
                    break

    def getModuleList(self, ET_tree):
        """
        Get a list of modules from the given ET_tree
        """
        module_list = []

        # load configuration information
        configuration = ET_tree.getroot()
        modules = configuration.find("modules")
        for module in modules.findall("module"):
            module_name = module.find("name").text
            position_str = module.find("position").text
            module_position = string2Tuple(position_str)
            joint_angle_str = module.find("joints").text
            module_joint_angle = string2Tuple(joint_angle_str)
            module_file_path = module.find("path").text

            if len(module_position) == 6:
                new_module = Module.Module(module_name, module_position, module_joint_angle, module_file_path)
                new_module.rotation_matrix = kinematics.rotz(module_position[5])* \
                                             kinematics.roty(module_position[4])* \
                                             kinematics.rotx(module_position[3])
            elif len(module_position) == 7:
                new_module = Module.Module(module_name, module_position, module_joint_angle ,module_file_path, True)
                new_module.rotation_matrix = kinematics.quatToRot(module_position[3:])

            module_list.append(new_module)
        return module_list

    def getConnectionList(self, ET_tree):
        """
        Get a list of connections from the given ET_tree
        """
        connection_list = []

        # load connection information
        configuration = ET_tree.getroot()
        connections = configuration.find("connections")
        for connection in connections.findall('connection') :
            module1_name = connection.find('module1').text
            module2_name = connection.find('module2').text
            new_connection = Connection.Connection(module1_name, module2_name,
                                        int(connection.find('node1').text), int(connection.find('node2').text),
                                        float(connection.find('distance').text), float(connection.find('angle').text))
            connection_list.append(new_connection)

        return connection_list

    def updateModuleNodeInfo(self, connection_list, module_list):
        for connection in connection_list:
            module_name = connection.Module1
            self.findModuleObject(module_list, module_name).connect(connection.Node1)
            module_name = connection.Module2
            self.findModuleObject(module_list, module_name).connect(connection.Node2)
        return module_list

    def findModuleObject(self, module_list, module_name):
        """
        Find a module object from a with a given name
        """
        for module_obj in module_list:
            if module_obj.ModelName == module_name:
                return module_obj
        raise ValueError("Cannot find module with name {!r}".format(module_name))

    def onSelectConfig1(self, event):  # wxGlade: Designer_Frame.<event_handler>
        self.fullyClearComboBox(self.combo_box_module1)
        self.fullyClearComboBox(self.combo_box_node1)
        item_id = self.combo_box_config1.GetSelection()
        component_obj = self.combo_box_config1.GetClientData(item_id)
        self.p_canvas.setData(self.getModuleList(component_obj.sle_object.ET_tree))
        for module_obj in component_obj.module_list:
            self.combo_box_module1.Append(module_obj.ModelName, module_obj)

    def onSelectConfig2(self, event):  # wxGlade: Designer_Frame.<event_handler>
        self.fullyClearComboBox(self.combo_box_module2)
        self.fullyClearComboBox(self.combo_box_node2)
        item_id = event.GetSelection()
        component_obj = self.combo_box_config2.GetClientData(item_id)
        self.c_canvas.setData(self.getModuleList(component_obj.sle_object.ET_tree))
        for module_obj in component_obj.module_list:
            self.combo_box_module2.Append(module_obj.ModelName, module_obj)

    def checkComponentName(self):
        name = self.text_ctrl_name.GetValue()
        if name == "":
            wx.MessageDialog(self, "Please specify a name for this component.", style=wx.OK|wx.ICON_EXCLAMATION|wx.STAY_ON_TOP).ShowModal()
            return False
        elif name in self.inserted_components:
            wx.MessageDialog(self, "Name already exists.", style=wx.OK|wx.ICON_EXCLAMATION|wx.STAY_ON_TOP).ShowModal()
            return False
        return True

    def fullyClearComboBox(self, combo_box_obj):
        combo_box_obj.Insert("",0)
        combo_box_obj.SetSelection(0)
        combo_box_obj.Clear()

    def onClickInsert(self, event):  # wxGlade: Designer_Frame.<event_handler>
        item_id = self.combo_box_base.GetSelection()
        if item_id != wx.NOT_FOUND:
            # Choosing the base component
            if self.checkComponentName():
                component_obj = deepcopy(self.combo_box_base.GetClientData(item_id))
                component_obj.name = self.text_ctrl_name.GetValue()

                print "Adding {}...".format(component_obj.name)
                self.inserted_components[component_obj.name] = component_obj
                self.combo_box_config1.Append(component_obj.name + " (Base)", component_obj)

                # clear the GUI
                self.fullyClearComboBox(self.combo_box_base)
                self.text_ctrl_name.SetValue(self.nextAvailableName())
                self.combo_box_base.Disable()
                self.setComboBoxState(True)
        else:
            # Adding child component
            if self.checkComponentName():
                # get parent component
                item_id = self.combo_box_config1.GetSelection()
                p_component_obj = self.combo_box_config1.GetClientData(item_id)
                p_module_name = self.combo_box_module1.GetStringSelection()
                p_node = self.node_name.index(self.combo_box_node1.GetStringSelection())

                # update parent node
                self.findModuleObject(p_component_obj.module_list, p_module_name).connect(p_node)

                # get child component
                item_id = self.combo_box_config2.GetSelection()
                c_component_obj = deepcopy(self.combo_box_config2.GetClientData(item_id))
                c_component_obj.name = self.text_ctrl_name.GetValue()
                c_module_name = self.combo_box_module2.GetStringSelection()
                c_node = self.node_name.index(self.combo_box_node1.GetStringSelection())

                # update child node
                self.findModuleObject(c_component_obj.module_list, c_module_name).connect(c_node)

                print "Adding {}...".format(c_component_obj.name)
                self.inserted_components[c_component_obj.name] = c_component_obj
                self.combo_box_config1.Append(c_component_obj.name, c_component_obj)

                p_info = [p_component_obj.name, p_module_name, self.node_name[p_node]]
                c_info = [c_component_obj.name, c_module_name, self.node_name[c_node]]
                distance = float(self.text_ctrl_distance.GetValue())
                angle = int(self.slider_angle.GetValue())
                self.list_ctrl_configs.Append(p_info + c_info + [distance, angle])
                self.link_list.append({"p_component_obj":p_component_obj,
                                       "c_component_obj":c_component_obj,
                                       "p_module_name":p_module_name,
                                       "c_module_name":c_module_name,
                                       "p_node":p_node,
                                       "c_node":c_node,
                                       "distance":distance,
                                       "angle":angle})
                self.list_ctrl_configs.SetItemData(-1, len(self.link_list)-1)
                self.button_remove.Enable()

                # clear the GUI
                self.fullyClearComboBox(self.combo_box_node1)
                self.fullyClearComboBox(self.combo_box_node2)
                self.fullyClearComboBox(self.combo_box_module1)
                self.fullyClearComboBox(self.combo_box_module2)
                self.fullyClearComboBox(self.combo_box_config2)
                self.text_ctrl_name.SetValue(self.nextAvailableName())
                self.populateConfigList()
                self.onSelectConfig1(None)

    def onClickRemove(self, event):  # wxGlade: Designer_Frame.<event_handler>
        item_id = self.list_ctrl_configs.GetFirstSelected()
        if item_id == -1:
            wx.MessageDialog(self, "Please select an inserted link.", style=wx.OK|wx.ICON_EXCLAMATION|wx.STAY_ON_TOP).ShowModal()
            return

        self.list_ctrl_configs.DeleteItem(item_id)
        self.link_list.pop(item_id)

        if len(self.link_list) == 0:
            self.button_remove.Disable()

    def onClickSave(self, event):  # wxGlade: Designer_Frame.<event_handler>
        saveFileDialog = wx.FileDialog(self, "Save As", os.getcwd(), "NewStructure", "Struct Files (*.struct)|*.struct", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        saveFileDialog.ShowModal()
        self.saveStructure(saveFileDialog.GetPath())
        saveFileDialog.Destroy()

    def saveStructure(self, path):
        if not path.endswith(".struct"):
            path += ".struct"

        root = ET.Element("Structure")
        components = ET.SubElement(root, "Components")
        links = ET.SubElement(root, "Links")

        for component_id, component_obj in self.inserted_components.iteritems():
            component = ET.Element("Component")
            c_id = ET.SubElement(component, "component_id")
            c_id.text = component_id
            c_path = ET.SubElement(component, "file_path")
            sle_object = component_obj.sle_object
            c_path.text = os.path.join(sle_object.entry_dir_path, sle_object.configuration_file_name)
            self.component_dict[component_id] = component
            components.append(component)

        for link_id, link_obj in enumerate(self.link_list):

            component1_info = {"ET_element": self.component_dict[link_obj["p_component_obj"].name],
                               "module_name": link_obj["p_module_name"],
                               "node": str(link_obj["p_node"])}
            component2_info = {"ET_element": self.component_dict[link_obj["c_component_obj"].name],
                               "module_name": link_obj["c_module_name"],
                               "node": str(link_obj["c_node"])}
            other_info = {"distance": str(link_obj["distance"]), "angle": str(link_obj["angle"])}

            link = Link.Link()
            link.link_id = "Link_{}".format(link_id)
            link.link_info = {"component1_info": component1_info,
                              "component2_info": component2_info,
                              "other_info": other_info}
            links.append(link.toET())

        with open(path, "w") as f:
            f.write(prettify(root))

    def onSelectModule1(self, event):  # wxGlade: Designer_Frame.<event_handler>
        self.fullyClearComboBox(self.combo_box_node1)
        item_id = event.GetSelection()
        item = self.combo_box_module1.GetClientData(item_id)
        self.combo_box_node1.SetItems([self.node_name[i] for i in xrange(4) if not item.nodes[i]])

    def onSelectModule2(self, event):  # wxGlade: Designer_Frame.<event_handler>
        self.fullyClearComboBox(self.combo_box_node2)
        item_id = event.GetSelection()
        item = self.combo_box_module2.GetClientData(item_id)
        self.combo_box_node2.SetItems([self.node_name[i] for i in xrange(4) if not item.nodes[i]])

    def onSelectBase(self, event):  # wxGlade: Designer_Frame.<event_handler>
        item_id = event.GetSelection()
        item = self.combo_box_base.GetClientData(item_id)
        self.p_canvas.setData(self.getModuleList(item.sle_object.ET_tree))


# end of class Designer_Frame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = Designer_Frame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
